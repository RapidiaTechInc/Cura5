name: Cura Installer
run-name: ${{ inputs.cura_conan_version }} for ${{ inputs.platform }} by @${{ github.actor }}

on:
    workflow_call:
        inputs:
            platform:
                description: 'Selected Installer OS'
                default: 'ubuntu-20.04'
                required: true
                type: string
            os_name:
                description: 'OS Friendly Name'
                default: 'linux'
                required: true
                type: string
            cura_conan_version:
                description: 'Cura Conan Version'
                default: 'cura/5.0.0@rapidia/testing'
                required: true
                type: string


env:
    CURA_CONAN_VERSION: ${{ inputs.cura_conan_version }}
    TOKEN_GITHUB: ${{ secrets.TOKEN_GITHUB }}

jobs:
    cura-installer-create:
        runs-on: ${{ inputs.platform }}
        steps:
            -   name: Checkout
                uses: actions/checkout@v3


            -   name: Checkout engine
                uses: actions/checkout@v3
                with:
                    repository: RapidiaTechInc/CuraEngine5
                    token: ${{ secrets.TOKEN_GITHUB }}
                    ref: no-test
                    path: curaEngine

            -   name: Setup Python and pip
                uses: actions/setup-python@v4
                with:
                    python-version: '3.10.x'
                    cache: 'pip'
                    cache-dependency-path: .github/workflows/requirements-conan-package.txt

            -   name: Install Python requirements for runner
                run: pip install -r https://raw.githubusercontent.com/RapidiaTechInc/Cura5/play/.github/workflows/requirements-conan-package.txt
                #  Note the runner requirements are always installed from the main branch in the Ultimaker/Cura repo

            -   name: Use Conan download cache (Powershell)
                if: ${{ runner.os == 'Windows' }}
                run: conan config set storage.download_cache="C:\Users\runneradmin\.conan\conan_download_cache"

            -   name: Cache Conan local repository packages (Powershell)
                uses: actions/cache@v3
                if: ${{ runner.os == 'Windows' }}
                with:
                    path: |
                        C:\Users\runneradmin\.conan\data
                        C:\.conan
                        C:\Users\runneradmin\.conan\conan_download_cache
                    key: conan-${{ runner.os }}-${{ runner.arch }}-installer-cache

            -   name: Create the default Conan profile
                run:  conan profile new default --detect

            -   name: Get Conan configuration
                if: ${{ inputs.conan_config == '' }}
                run: conan config install https://github.com/Ultimaker/conan-config.git

            -   name: create conan Engine package (powershell)
                if: ${{ runner.os == 'Windows' }}
                working-directory: curaEngine
                run: conan create . curaengine/5.4.0@rapidia/stable --build=missing --update


            -   name: create conan package (powershell)
                if: ${{ runner.os == 'Windows' }}
                run: conan create . $Env:CURA_CONAN_VERSION --build=missing --update

            -   name: Install the Packages (Powershell)
                if: ${{ runner.os == 'Windows' }}
                run: conan install $Env:CURA_CONAN_VERSION --build=missing --update -if cura_inst -g VirtualPythonEnv --json "cura_inst/conan_install_info.json"

            -   name: Set Environment variables for Cura (Powershell)
                if: ${{ runner.os == 'Windows' }}
                run: |
                    echo "${Env:WIX}\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
                    .\cura_inst\Scripts\activate_github_actions_env.ps1
                    .\cura_inst\Scripts\activate_github_actions_version_env.ps1


                # FIXME: This is a workaround to ensure that we use and pack a shared library for OpenSSL 1.1.1l. We currently compile
                #  OpenSSL statically for CPython, but our Python Dependenies (such as PyQt6) require a shared library.
                #  Because Conan won't allow for building the same library with two different options (easily) we need to install it explicitly
                #  and do a manual copy to the VirtualEnv, such that Pyinstaller can find it.

            -   name: Install OpenSSL shared
                run: conan install openssl/1.1.1l@_/_ --build=missing --update -o openssl:shared=True -g deploy                   

            -   name: Copy OpenSSL shared (Powershell)
                if: ${{ runner.os == 'Windows' }}
                run: |
                    cp openssl/bin/*.dll ./cura_inst/Scripts/
                    cp openssl/lib/*.lib ./cura_inst/Lib/

            -   name: Create the Cura dist
                run: pyinstaller ./cura_inst/UltiMaker-Cura.spec

            -   name: Output the name file name and extension
                id: filename
                shell: python
                run: |
                    import os
                    installer_filename = f"UltiMaker-Cura-{os.getenv('CURA_VERSION_FULL')}-${{ inputs.os_name }}"
                    if "${{ runner.os }}" == "Windows":
                        installer_ext = "msi" if "${{ inputs.msi_installer }}" == "true" else "exe"
                    elif "${{ runner.os }}" == "macOS":
                        installer_ext = "pkg" if "${{ inputs.msi_installer }}" == "true" else "dmg"
                    else:
                        installer_ext = "AppImage"
                    output_env = os.environ["GITHUB_OUTPUT"]
                    content = ""
                    if os.path.exists(output_env):
                        with open(output_env, "r") as f:
                            content = f.read()
                    with open(output_env, "w") as f:
                        f.write(content)
                        f.writelines(f"INSTALLER_FILENAME={installer_filename}\n")
                        f.writelines(f"INSTALLER_EXT={installer_ext}\n")
                        f.writelines(f"FULL_INSTALLER_FILENAME={installer_filename}.{installer_ext}\n")

            -   name: Archive the artifacts (Powershell)
                if: ${{ !inputs.installer && runner.os == 'Windows' }}
                run: Compress-Archive -Path ".\UltiMaker-Cura" -DestinationPath ".\${{ steps.filename.outputs.INSTALLER_FILENAME }}.zip"
                working-directory: dist

            -   name: Create the Windows exe installer (Powershell)
                if: ${{ inputs.installer && runner.os == 'Windows' && !inputs.msi_installer }}
                run: |
                    # echo "CURA_VERSION_MAJOR=5" >> $GITHUB_ENV
                    # echo "CURA_VERSION_MINOR=0" >> $GITHUB_ENV
                    # echo "CURA_VERSION_PATCH=0" >> $GITHUB_ENV
                    # echo "CURA_VERSION_BUILD=1" >> $GITHUB_ENV
                    # echo "CURA_VERSION_FULL='rapidia-cura'" >> $GITHUB_ENV
                    python ..\cura_inst\packaging\NSIS\create_windows_installer.py ../cura_inst . "${{ steps.filename.outputs.FULL_INSTALLER_FILENAME }}"
                working-directory: dist

            -   name: Upload the artifacts
                uses: actions/upload-artifact@v3
                with:
                    name: ${{ steps.filename.outputs.INSTALLER_FILENAME }}-${{ steps.filename.outputs.INSTALLER_EXT }}
                    path: |
                        dist/*.tar.gz
                        dist/*.zip
                        dist/*.exe
                        dist/*.asc
                    retention-days: 5