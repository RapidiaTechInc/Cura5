name: Add to server
run-name: add all packages to server

on:
    workflow_call:
        inputs:
            platform:
                description: 'Selected Installer OS'
                default: 'ubuntu-20.04'
                required: true
                type: string
            os_name:
                description: 'OS Friendly Name'
                default: 'linux'
                required: true
                type: string



env:
    CONAN_SERVER_PASSWORD: ${{ secrets.CONAN_SERVER_PASSWORD }}
    TOKEN_GITHUB: ${{ secrets.TOKEN_GITHUB }}

jobs:
    upload_all_needed_packages_to_conan_server:
        runs-on: ${{ inputs.platform }}
        steps:
            -   name: Checkout
                uses: actions/checkout@v3


            -   name: Checkout engine
                uses: actions/checkout@v3
                with:
                    repository: RapidiaTechInc/CuraEngine5
                    token: ${{ secrets.TOKEN_GITHUB }}
                    path: curaEngine

            -   name: Checkout materials
                uses: actions/checkout@v3
                with:
                    repository: RapidiaTechInc/fdm_materials5
                    token: ${{ secrets.TOKEN_GITHUB }}
                    path: fdm_materials5

            -   name: Setup Python and pip
                uses: actions/setup-python@v4
                with:
                    python-version: '3.10.x'
                    cache: 'pip'
                    cache-dependency-path: .github/workflows/requirements-conan-package.txt

            -   name: Install Python requirements for runner
                run: pip install -r https://raw.githubusercontent.com/RapidiaTechInc/Cura5/new-dawn/.github/workflows/requirements-conan-package.txt
                #  Note the runner requirements are always installed from the main branch in the Ultimaker/Cura repo

            -   name: Install MacOS system requirements
                if:  ${{ runner.os == 'Macos' }}
                run: brew install autoconf automake ninja create-dmg # Delete create-dmg when deprecating dmg

                # NOTE: Due to what are probably github issues, we have to remove the cache and reconfigure before the rest.
                # This is maybe because grub caches the disk it uses last time, which is recreated each time.
            -   name: Install Linux system requirements
                if: ${{ runner.os == 'Linux' }}
                run: |
                    sudo rm /var/cache/debconf/config.dat
                    sudo dpkg --configure -a
                    sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
                    sudo apt update
                    sudo apt upgrade
                    sudo apt install build-essential checkinstall libegl-dev zlib1g-dev libssl-dev ninja-build autoconf libx11-dev libx11-xcb-dev libfontenc-dev libice-dev libsm-dev libxau-dev libxaw7-dev libxcomposite-dev libxcursor-dev libxdamage-dev libxdmcp-dev libxext-dev libxfixes-dev libxi-dev libxinerama-dev libxkbfile-dev libxmu-dev libxmuu-dev libxpm-dev libxrandr-dev libxrender-dev libxres-dev libxss-dev libxt-dev libxtst-dev libxv-dev libxvmc-dev libxxf86vm-dev xtrans-dev libxcb-render0-dev libxcb-render-util0-dev libxcb-xkb-dev libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev libxcb-randr0-dev libxcb-shape0-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-xinerama0-dev xkb-data libxcb-dri3-dev uuid-dev libxcb-util-dev libxkbcommon-x11-dev pkg-config -y

            -   name: Install GCC-12 on ubuntu-22.04
                if: ${{ startsWith(inputs.platform, 'ubuntu-22.04') }}
                run: |
                    sudo apt install g++-12 gcc-12 -y
                    sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 12
                    sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-12 12

            -   name: Use GCC-10 on ubuntu-20.04
                if: ${{ startsWith(inputs.platform, 'ubuntu-20.04') }}
                run: |
                    sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 10
                    sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 10

            -   name: Create the default Conan profile
                run:  conan profile new default --detect

            -   name: Get Conan configuration
                if: ${{ inputs.conan_config == '' }}
                run: conan config install https://github.com/RapidiaTechInc/conan-config.git

            -   name: add ultimaker and conan center remotes
                run: |
                    conan remote add cura https://ultimaker.jfrog.io/artifactory/api/conan/cura-internal
                    conan remote add conan-center https://center.conan.io   

            -   name: build troublesome packages (bash)
                if:  ${{ runner.os != 'Windows' }}
                run: bash build_troublesome_packages.sh

            -   name: Install OpenSSL shared
                run: conan install openssl/1.1.1l@_/_ --build=missing --update -o openssl:shared=True -g deploy

            -   name: create conan Engine package
                working-directory: curaEngine
                run: conan create . curaengine/5.0.1@rapidia/stable --build=missing --update

            -   name: create conan materials package
                working-directory: fdm_materials5
                run: conan create . fdm_materials/5.0.1@rapidia/stable --build=missing --update

            -   name: Install the Packages
                run: conan install . --build=missing --update -g VirtualPythonEnv

            -   name: log in to server
                run: conan user rapidia -p ${{ secrets.CONAN_SERVER_PASSWORD }}

            -   name: upload to server
                run: conan upload "*" --all --confirm -r rapidia-cura

                
